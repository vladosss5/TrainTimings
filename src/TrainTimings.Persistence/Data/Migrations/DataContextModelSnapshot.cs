// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainTimings.Persistence.Data.Context;

#nullable disable

namespace TrainTimings.Persistence.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainTimings.Core.Models.CitiesTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CitiesTrain_pk");

                    b.HasIndex("CityId");

                    b.HasIndex("TrainId");

                    b.HasIndex("TypeId");

                    b.ToTable("CitiesTrain", (string)null);
                });

            modelBuilder.Entity("TrainTimings.Core.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id")
                        .HasName("cities_pk");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.Timing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("TrainId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Timings_pk");

                    b.HasIndex("TrainId");

                    b.ToTable("Timings");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.Train", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Trains_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.TypeTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("Tipes_pk");

                    b.ToTable("TypesTrains");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.TypesFollowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("TypesFollowing_pk");

                    b.ToTable("TypesFollowing", (string)null);
                });

            modelBuilder.Entity("TrainTimings.Core.Models.CitiesTrain", b =>
                {
                    b.HasOne("TrainTimings.Core.Models.City", "City")
                        .WithMany("CitiesTrains")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("CitiesTrain_Cities_Id_fk");

                    b.HasOne("TrainTimings.Core.Models.Train", "Train")
                        .WithMany("CitiesTrains")
                        .HasForeignKey("TrainId")
                        .IsRequired()
                        .HasConstraintName("CitiesTrain_Trains_Id_fk");

                    b.HasOne("TrainTimings.Core.Models.TypesFollowing", "Type")
                        .WithMany("CitiesTrains")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("CitiesTrain_TypesFollowing_Id_fk");

                    b.Navigation("City");

                    b.Navigation("Train");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.Timing", b =>
                {
                    b.HasOne("TrainTimings.Core.Models.Train", "Train")
                        .WithMany("Timings")
                        .HasForeignKey("TrainId")
                        .IsRequired()
                        .HasConstraintName("Timings_Trains_Id_fk");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.Train", b =>
                {
                    b.HasOne("TrainTimings.Core.Models.TypeTrain", "TypeTrain")
                        .WithMany("Trains")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("Trains_Tipes_Id_fk");

                    b.Navigation("TypeTrain");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.City", b =>
                {
                    b.Navigation("CitiesTrains");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.Train", b =>
                {
                    b.Navigation("CitiesTrains");

                    b.Navigation("Timings");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.TypeTrain", b =>
                {
                    b.Navigation("Trains");
                });

            modelBuilder.Entity("TrainTimings.Core.Models.TypesFollowing", b =>
                {
                    b.Navigation("CitiesTrains");
                });
#pragma warning restore 612, 618
        }
    }
}
